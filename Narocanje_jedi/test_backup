jest.mock('mysql2/promise', () => {
  return {
    createConnection: jest.fn(), // <== key change
  };
});

jest.mock('./gateway', () => {
  const originalGateway = jest.requireActual('./gateway'); // Get the actual module to retain other exports like 'app'
  return {
    ...originalGateway, // Spread the actual exports (like 'app')
    client: { // Explicitly mock the 'client' export
      InsertOrder: jest.fn(),
    },
  };
});

const request = require('supertest');
//const mysql = require('mysql2/promise');
const app = require('./gateway').app; // adjust path if needed
const client = require('./gateway').client; // Assuming you're exporting this too


process.env.DB_HOST = 'localhost';
process.env.DB_USER = 'root';
process.env.DB_PASSWORD = 'Jebed1ah15car10t';
process.env.DB_NAME = 'smartpanda';


//const mysql = require('mysql2/promise');
/*
jest.mock('./gateway', () => {
  const original = jest.requireActual('./gateway');
  return {
    ...original,
    client: {
      InsertOrder: jest.fn()
    }
  };
});*/

describe('Server Endpoints', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('GET /meals', () => {

    it('should fetch meals from database and return them', async () => {
      const mockRows = [
        { id: 1, ime: 'Pizza', opis: 'Tasty', zaloga: 10, tip: 'Fast food', cena: 9 },
        { id: 2, ime: 'Pasta', opis: 'Delicious', zaloga: 5, tip: 'Main', cena: 7 }
      ];
      const mockConnection = {
        execute: jest.fn().mockResolvedValue([mockRows]),
      };
      mysql.createConnection.mockResolvedValue(mockConnection);
      const res = await request(app).get('/meals');

      //expect(mysql.createConnection).toHaveBeenCalled();
      expect(mysql.createConnection).toHaveBeenCalledTimes(1);
      expect(mockConnection.execute).toHaveBeenCalledWith('SELECT * FROM jed');
      expect(res.statusCode).toBe(200);
      expect(res.body).toEqual(mockRows);
    });

});

describe('POST /user_has_meal', () => {
  it('should return success when gRPC InsertOrder succeeds', async () => {
    // Mock gRPC InsertOrder response
    client.InsertOrder.mockImplementation((data, callback) => {
      callback(null, { result: "SUCCESS" });
    });

    const response = await request(app)
      .post('/user_has_meal')
      .send({ user_id: 1, meal_id: 2, amount: 3 });

    expect(client.InsertOrder).toHaveBeenCalledWith(
      { user_id: 1, meal_id: 2, amount: 3 },
      expect.any(Function)
    );
    expect(response.statusCode).toBe(200);
    expect(response.body).toEqual({ message: "inserting order success" });
  });
});
});
